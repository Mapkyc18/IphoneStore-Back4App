@page "/manager-dashboard"
@using testing_final.Logic.Models
@inject ShoppingCart CartService
@inject OrderManager OrderManager

<h3>Manager Dashboard</h3>

@if (!IsAuthenticated)
{
    <div class="auth-form">
        <label for="password">Enter Manager Password:</label>
        <input type="password" id="password" @bind="ManagerPassword" />
        <button @onclick="AuthenticateManager">Login</button>
        <p class="error-message">@AuthenticationError</p>
    </div>
}
else
{
    <div>
        <div class="form">
            <label for="date">Select a date:</label>
            <input type="date" id="date" @bind="SelectedDate" />
        </div>

        <table>
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>Date</th>
                    <th>Total</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Orders)
                {
                    <tr>
                        <td>@order.OrderId</td>
                        <td>@order.OrderDate.ToShortDateString()</td>
                        <td>@TaxCalculator.FormatPrice(order.TotalAmount)</td>
                        <td>
                            <button @onclick="() => ViewDetails(order.OrderId)">View Details</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (SelectedOrder != null)
        {
            <h4>Order Details</h4>
            <ul>
                @foreach (var item in SelectedOrder.Items)
                {
                    <li>@item.Quantity x @item.Name (@TaxCalculator.FormatPrice(item.Price) each)</li>
                }
            </ul>
            <p><strong>Total:</strong> @TaxCalculator.FormatPrice(SelectedOrder.TotalAmount)</p>
        }
    </div>
}

@code {
    private string ManagerPassword = string.Empty;
    private bool IsAuthenticated = false;
    private string AuthenticationError = string.Empty;
    private DateTime SelectedDate = DateTime.Now;
    private List<Order> Orders = new();
    private Order? SelectedOrder;

    protected override void OnInitialized()
    {
        CartService.CartUpdated += StateHasChanged;
    }

    private void AuthenticateManager()
    {
        const string correctPassword = "Banana"; 
        if (ManagerPassword == correctPassword)
        {
            IsAuthenticated = true;
            ManagerPassword = string.Empty; 
            AuthenticationError = string.Empty;
            LoadOrders();
        }
        else
        {
            AuthenticationError = "Invalid password. Please try again.";
        }
    }

    private void LoadOrders()
    {
        Orders = OrderManager.GetOrdersByDate(SelectedDate);
    }

    private void ViewDetails(int orderId)
    {
        SelectedOrder = OrderManager.GetOrderDetails(orderId);
    }

    public void Dispose()
    {
        CartService.CartUpdated -= StateHasChanged;
    }
}

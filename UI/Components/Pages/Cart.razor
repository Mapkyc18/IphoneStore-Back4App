@page "/cart"
@using testing_final.Logic.Models
@inject ShoppingCart CartService
@inject OrderManager OrderManager

<h1>Your Cart</h1>

@if (CartService.Items.Count > 0)
{
    <table>
        <thead>
            <tr>
                <th>Item Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in CartService.Items)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>$@item.Price</td>
                    <td>@item.Quantity</td>
                    <td>$@(item.Price * item.Quantity)</td>
                </tr>
            }
        </tbody>
    </table>

    <p><strong>Subtotal:</strong> $@CartService.CalculateCartSubtotal()</p>
    <p><strong>Sales Tax (7%):</strong> $@CartService.CalculateTax()</p>
    <p><strong>Total:</strong> $@CartService.CalculateCartTotal()</p>

    <div class="cart-actions">
        <button @onclick="ClearCart">Clear Cart</button>
        <button @onclick="ProceedOrderRequest">Checkout</button>
    </div>

    @if (!string.IsNullOrEmpty(SuccessMessage))
    {
        <p class="success-message">@SuccessMessage</p>
    }
}
else
{
    <p>Your cart is empty.</p>
}

@code {
    private string SuccessMessage = string.Empty;

    private void ClearCart()
    {
        CartService.ClearCart();
        SuccessMessage = "Cart cleared.";
    }

    private void ProceedOrderRequest()
    {
        var order = new Order
        {
            OrderDate = DateTime.Now,
            Items = CartService.Items
        };

        OrderManager.AddOrder(order);
        CartService.ClearCart();

        var pickupDate = DateTime.Now.AddDays(8).ToString("MMMM dd, yyyy");
        SuccessMessage = $"Order confirmed! Come to pick up your iPhone on {pickupDate}. Pay when you come to pick it up.";
    }
}
